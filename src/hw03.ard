\import Data.List
\import Function.Meta
\import Paths
\import Paths.Meta
\open Nat(+,*)

\import lect03 (fileTest, M5, +-assoc, +-comm)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func fileTest1 => (17, 8, 13, 55, 18, 21)

\func proveFileTest : fileTest1 = fileTest => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\module M51 \where {
  \func t''' => ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29))
}

\func proveM5t''' : M51.t''' = M5.t''' => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | a :: xs => pmap (a ::) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.
\func xsnil {A : \Type} (xs : List A) : xs = xs ++ nil \elim xs
  | nil => idp
  | a :: xs => pmap (a ::) (xsnil xs)

\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs, ys
  | nil, nil => idp
  | nil, a :: ys => xsnil (reverse (a :: ys)) -- reverse ys ++ a :: nil = (reverse ys ++ a :: nil) ++ nil
  | a :: xs, nil => pmap (`++ a :: nil) (pmap reverse $ inv $ xsnil xs)  -- reverse (xs ++ nil) ++ a :: nil = reverse xs ++ a :: nil  (xsnil (reverse xs)) pmap (`++ a :: nil)
  | x :: xs, y :: ys => rewrite (inv $ ++-assoc (reverse ys ++ y :: nil) (reverse xs) (x :: nil))
    $ (pmap (`++ x :: nil)) (reverse++ xs (y :: ys))

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | a :: xs => rewrite (reverse++ (reverse xs) (a :: nil)) $ pmap (a ::) (reverse-isInvolutive xs)

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n => rewriteI (+-assoc (m * n + m)  (k * n)  k)
    $ rewriteI (+-assoc ((m + k) * n) m k ) $ rewrite (+-assoc (m * n) m (k * n))
    $ rewrite (+-comm m (k * n)) $ rewriteI (+-assoc (m * n) (k * n) m )
    $ pmap (`+ k ) $ pmap (`+ m ) (rdistr n m k)

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim m, k
  | 0, 0 => idp
  | 0, suc k => idp
  | suc m, 0 => idp
  | suc m, suc k => rewriteI (+-assoc ((n * m) + n) (n * k) n)
    $ rewrite (+-assoc (n * m) n (n * k))
    $ rewrite (+-comm n (n * k))
    $ rewriteI (+-assoc (n * m) (n * k) n)
    $ pmap (`+ n) $ pmap (`+ n) (ldistr n m k)

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam k => f a b = f a' k) q (transport (\lam x => f a b = f x b) p idp)

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam _x => _x) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b
