\import Data.Bool
\import Data.List
\import Function.Meta
\import Logic
\import Meta
\import Paths.Meta
\import hw05
\import lect06 (Decide, no, yes)
\import lect10

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) =>
  \lam {x} {y} p1 =>
      \let
        | unfold_p1 => unfold o p1
        | unfold_q => unfold isInj q
        | unfold_p => unfold isInj p
        | fx=fy => unfold_q {f x} {f y} unfold_p1
      \in unfold_p fx=fy

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  \lam {x} {y} p1 =>
      \let
        | unfold_p => unfold isInj $ unfold o p
      \in unfold_p {x} {y} (pmap g p1)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.\

\func ismod3 (n : Nat) : Bool
  | 0 => true
  | suc (suc (suc n)) => ismod3 n
  | _ => false

\func ismod5 (n : Nat) : Bool
  | 0 => true
  | suc (suc (suc (suc (suc n)))) => ismod5 n
  | _ => false

\func isMultipleOf3Or5 (n : Nat) : \Type => So (or (ismod3 n) (ismod5 n))

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) => \lam x y => ext

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => \lam {x} {y} p =>
    \let
      | unfold_p => unfold Mul-inc p
    \in ext unfold_p

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) =>
  (\lam i => unfold isProp (\lam x y =>
                                \let
                                  | i2=x => i.2 x
                                  | i2=y => i.2 y
                                \in rewriteI i2=x $ rewriteI i2=y idp, i.1),
   \lam _x => unfold isTriv (_x.2, _x.1 _x.2))

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Or A B)) : Empty =>
  \let
    | rule => p {\Sigma} {\Sigma} Unit-isProp Unit-isProp
  \in \case rule (inl ()) (inr ())

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) =>
  \lam x y => helperLessOrEq-isProp {n} {m} x y

\func helperLessOrEq-isProp {n m : Nat} (x y : LessOrEq n m) : x = y \elim n, m, x, y
  | 0, m, z<=n, z<=n => idp
  | suc n, suc m, s<=s x, s<=s y => pmap s<=s (helperLessOrEq-isProp {n} {m} x y)

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => So (x < y)) n m) =>
  \lam x y => \case \elim x, \elim y \with {
    | refl p, refl p1 => pmap refl $ ext
    | refl p, inc r => \case helper<-isProp {n} {m} r p
    | inc r, refl p => \case helper<-isProp {n} {m} r p
    | inc r, inc r1 => pmap inc $ ext
  }

\func helper<-isProp {n m : Nat} (r : So (n < m)) (p : n = m) : Empty \elim n, m
  | 0, 0 => r
  | 0, suc m => \case p
  | suc n, 0 => r
  | suc n', suc m' =>
    \let
      n'=m' : n' = m' => pmap (\lam n => \case n \with {
        | 0 => 0
        | suc n1 => n1
      }) p
    \in helper<-isProp {n'} {m'} r n'=m'

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty =>
  \let
    | p00 => p 0 0
    | refl=inc => p00 (refl idp) (inc z<=n)
  \in \case refl=inc \with {
  }

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A => \lam x y =>
    \let
      | unfoldp => unfold isInj p
      | unfoldq => unfold isProp q
    \in unfoldp $ unfoldq (f x) (f y)

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A =>
  setLem {A}
      (\lam a a1 => \case dec a a1 \with {
        | yes a2 => \Sigma
        | no n => Empty
      })
      (\lam x y => mcases \with {
        | yes a2 => Unit-isProp
        | no n => Empty-isProp
      })
      (\lam a => mcases \with {
        | yes a2 => ()
        | no n => \case n idp
      })
      (\lam {a} {a'} => mcases \with {
        | yes a2 => \lam _x => a2
        | no n => \lam _x => \case _x
      })

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B) => setLem {Or A B}
    (\lam o o1 => \case \elim o, \elim o1 \with {
      | inl a, inl a1 => a = a1
      | inl a, inr b => Empty
      | inr b, inl a => Empty
      | inr b, inr b1 => b = b1
    })
    (\lam x y => mcases \with {
      | inl a, inl a1 => p a a1
      | inl a, inr b => Empty-isProp
      | inr b, inl a => Empty-isProp
      | inr b, inr b1 => q b b1
    } )
    (\lam a => cases a \with {
      | inl a1 => idp
      | inr b => idp
    })
    (\lam {a} {a'} => mcases \with {
      | inl a1, inl a2 => \lam _x => rewrite _x idp
      | inl a1, inr b => \lam _x => \case _x
      | inr b, inl a1 => \lam _x => \case _x
      | inr b, inr b1 => \lam _x => rewrite _x idp
    })

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) =>
  setLem {\Pi (x : A) -> B x}
      (\lam f1 f2 => \Pi (x : A) -> f1 x = f2 x)
      (\lam x y => {?})
      (\lam a x => idp)
      (\lam {a} {a'} a_x=a'x => ext (\lam x => a_x=a'x x))

-- 11. Докажите, что если A является множеством, то List A также им является.

\func helperListRule {A : \Type} (l1 l2 : List A) : \Type \elim l1, l2
  | nil, nil => \Sigma
  | nil, a :: l2 => Empty
  | a :: l1, nil => Empty
  | a :: l1, a1 :: l2 => \Sigma (a = a1) (helperListRule l1 l2)

\func helperListEq {A : \Type} (l1 l2 : List A) (h : helperListRule l1 l2) : l1 = l2 \elim l1, l2, h
  | nil, nil, h => idp
  | x1 :: x2, y1 :: y2, h => rewrite h.1 $ pmap (:: y1) (helperListEq {A} x2 y2 h.2)

\func helperLista=a {A : \Type} (a : List A) : helperListRule a a
\elim a
  | nil => ()
  | a1 :: a2 => (idp, helperLista=a {A} a2)

\func helperListIsProp {A : \Type} (x y : List A) (pA : isSet A): isProp (helperListRule x y) \elim x, y
  | nil, nil => Unit-isProp
  | nil, a :: y => Empty-isProp
  | a :: x, nil => Empty-isProp
  | x1 :: x2, y1 :: y2 =>
    \let
      | isEqProp : isProp (x1 = y1) => pA x1 y1
      | isPropx2y2 : isProp (helperListRule x2 y2) => helperListIsProp x2 y2 pA
    \in Sigma-isProp isEqProp isPropx2y2

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A) => setLem {List A}
    (\lam l1 l2 => helperListRule l1 l2)
    (\lam l1 l2 => helperListIsProp l1 l2 pA)
    (\lam a => helperLista=a {A} a)
    (\lam {l1} {l2} h => helperListEq l1 l2 h)