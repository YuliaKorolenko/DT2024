\import Data.Maybe
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import hw01 (gcd)
\import lect07
\open Nat (+)

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.

\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.

\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a,b) => \new Pair B A b a

-- При помощи \new и доступа к полям.

\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair {
  | fst_ => p.snd_
  | snd_ => p.fst_
}

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => \case p.p \with {
}

\func one-isPos : PosNat 1 \cowith
  | p => ()

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record PrimeAB (a b : Nat) (rool : gcd a b = 1)

\func Prime60B : \Type => PrimeAB { | a => 60 }

-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor
  | return {A : \Set} : A -> F A
  | \infixl 1 >>= {A B : \Set} : F A -> (A -> F B) -> F B
  | left-identity {A B : \Set} (a : A) (f : A -> F B) : (return a >>= f) = f a
  | right-identity {A : \Set} (m : F A) : (m >>= return) = m
  | associativity {A B C : \Set} (m : F A) (f : A -> F B) (g : B -> F C) : ((m >>= f) >>= g) = (m >>= (\lam x => f x >>= g))
  | Functor.fmap f => \lam f1 => f1 >>= (\lam x => return (f x))
  | Functor.fmap-id => right-identity
  | Functor.fmap-comp f g x => {?}

--   | fmap {A B : \Set} : (A -> B) -> (F A -> F B)
--   | fmap-id {A : \Set} (x : F A) : fmap (\lam a => a) x = x
--   | fmap-comp {A B C : \Set} (f : A -> B) (g : B -> C) (x : F A) : fmap (\lam a => g (f a)) x = fmap g (fmap f x)

-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | return x => just x
  | >>= el f => \case el \with {
    | nothing => nothing
    | just a => f a
  }
  | left-identity el f => idp
  | right-identity m => cases m \with {
    | nothing => idp
    | just a => idp
  }
  | associativity el fa fb => cases el \with {
    | nothing => idp
    | just a => idp
  }

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad (S : \Set): Monad (State S)
  | return el => \new State {
    | state => \lam s => (s,el)
  }
  | >>= el f => \new State {
    | state => \lam s =>  ((state {f (state {el} s).2} (state {el} s).1).1,
                           (state {f (state {el} s).2} (state {el} s).1).2)
  }
  | left-identity el f => idp
  | right-identity f => idp
  | associativity el f1 f2 => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\instance State'Monad (S : \Set): Monad (State' S)
  | return el => state' (\lam s => (s, el))
  | >>= (state' f1) f => state' (\lam s => cases (f (f1 s).2) \with {
    | state' _x => _x s
  })
  | left-identity el f => cases (f el) \with {
    | state' _x => idp
  }
  | right-identity m => \case \elim m \with {
    | state' _x => path(\lam i => state' {?})
  }
  | associativity el f1 f2 => \case \elim el \with {
    | state' _x => {?}
  }
