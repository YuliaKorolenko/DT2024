\import Data.Bool
\import Logic
\import Paths.Meta
\import lect02 (==)
\import lect05 (funExt, left=i)
\import Paths (transport)
\import hw03 (repl)
\import lect05 (J)

-- 1. Докажите pmap при помощи паттерн матчинга с idp.

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' \elim p
  | idp => idp

-- 2. Докажите pmap2 при помощи паттерн матчинга с idp.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' \elim p, q
  | idp, idp => idp

-- Optional task
-- 3 У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p => J (\lam i => B a i) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- a. Выразите transport через Jalt.
-- b. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- c. Используя эти две конструкции, легко определить J.

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => Jalt {?} {?} p

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p => {?}

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p => transport'' (\lam a => {?}) (sigma-contr (a', p)) b

-- 4. Определите функцию swap и докажите, что swap (swap p) = p.

\func swap {A B : \Type} (p : \Sigma A B) : \Sigma B A
  => (p.2, p.1)

\func swap-involutive {A B : \Type} (p : \Sigma A B) : swap (swap p) = p \elim p
  | (a,b) => idp

-- 5. Докажите, что (\lam x => not (not x)) = (\lam x => x).

\func not-isInvolution (x : Bool) : not (not x) = x \elim x
  | false => idp
  | true => idp

\func notNotId : (\lam x => not (not x)) = (\lam x => x) => funExt _ (\lam a => not-isInvolution a)

-- 6. Докажите, что fac не равен suc.

\open Nat(*)

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func opFunExt {A : \Type} (B : A -> \Type) {f g : \Pi (a : A) -> B a}
             (p : f = g) : \Pi (a : A) -> f a = g a \elim p
  | idp => \lam _ => idp

\func fac/=suc (p : fac = suc) : Empty => \let t => opFunExt _ p 1 \in repl (pmap (\lam a =>
    \case a \with {
      | zero => Empty
      | suc zero => \Sigma
      | suc (suc n) => Empty
    }) t) ()

-- 7. Докажите, что left = right, не используя transport, coe и паттерн матчинг с idp.

\func left=right : left = right => path (\lam i => i)

-- 8. Докажите, что если a = a' и b = b', то (a,b) = (a',b'), не используя transport, coe и паттерн матчинг с idp.

\func pairEq {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b') : (a,b) = (a',b') =>
  path (\lam i => (p i, q i))

-- 9. Докажите, что если p = p', то p.1 = p'.1, не используя transport, coe и паттерн матчинг с idp.

\func projEq {A : \Type} (B : A -> \Type) {p p' : \Sigma (x : A) (B x)} (t : p = p') : p.1 = p'.1 =>
  path (\lam i => (t i).1)

-- 10. Докажите pmap2, не используя transport, coe и паттерн матчинг с idp.

\func pmap2' {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  path (\lam i => f (p i) (q i))

-- 11. Мы видели как определить transport через coe. Определите частный случай coe через transport.

\func coe0 (A : I -> \Type) (a : A left) : A right => transport A left=right a

-- 12. Докажите, что transport' от константной функции возвращает свой последний аргумент.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' \elim p
  | idp => b

\func transport'_const {A B : \Type} {a a' : A} (p : a = a') (b : B) : transport' (\lam _ => B) p b = b
  \elim p
    | idp => idp

-- 13. Определите функцию B right -> B left.

\func right=left : right = left => rewrite left=right idp

\func Itr' {B : I -> \Type} (b : B right) : B left => transport B right=left b
